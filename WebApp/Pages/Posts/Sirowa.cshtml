@page
@model WebApp.Pages.Posts.Sirowa

<div class="my-container">
    <div class="mt-3 mb-3">
        <h4 class="fw-semibold">Tempsens - temperature monitoring application</h4>
    </div>
    <div>
        <p>
            Developed full stack warehouse temperature monitoring web application named Tempsens to monitor product storage compliance with temperture requirements.
            Monitoring is required by Ravimiamet for storage of medicinal goods.
        </p>
        <p>
            Warehouse uses two types of Comet sensors stationary and remote.
            Stationary sensors connect to Tempsens SOAP API.
            Remote sensor can be connected user machine by mini-USB. 
            Sensor data can then be downloaded as a CSV file though Comet Vision application.
            The CSV can subsequently be uploaded in Tempsens front-end application that uses REST API internally for saving the parsed data.
        </p>
        <p>
            Application uses binning and clustering algorithms to help data visulize data.
            <p>
                Binning serves both tecnical and user specific needs. 
                Binning algorithm creates uniformed period buckets that contain multiple sensor reading.
                This can speed up chart drawing visualization time for large periods and also increase resulting chart readability.
                The buckets also allows different visualization behavior like average value and most extreme value.
                Lastly empty buckets allow to easily visualize alerts (buckets should contain values).
            </p>
            <p>
                Clustering allows for more accurate way to show sensor alerts for both value out of bounds errors and missing value errors.
            </p>
        <p>
            Typical application workflow from sensor to user:
        </p>
        <ol>
            <li>
                Warehouse sensors send temperture and humidity reading periodically to Tempsens application through SOAP API.
            </li>
            <li>
                Application saves request values to MySQL/MariaDb database.
            </li>
            <li>
                User enters the Tempsens frontend website.
            </li>
            <li>
                User enters start and end date of period to overview.
            </li>
            <li>
                Application loads sensor readings between selected period and calculates alerts through clustering algorith.
            </li>
            <li>
                User can see sensor alerts and visualize sensor readings (Google Charts)
            </li>
        </ol>
        Visual representation of the application workflow:
        <img style="object-fit: contain;
                    width: 100%;
                    max-height: 600px;" 
             src="~/img/tempsens-logic-diagram.png" alt="tempsens logic diagram">
    </div>
</div>